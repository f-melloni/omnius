@model FSS.Omnius.Modules.Entitron.Entity.Cortex.Task
@using System.Data.Entity;
@using FSS.Omnius.Modules.Entitron.Entity.Master
@using FSS.Omnius.Modules.Entitron.Entity.Cortex
@using FSS.Omnius.Controllers.Cortex
@{
    Layout = "~/Views/Shared/_PartialViewAjaxLayout.cshtml";
    CortexController c = (CortexController)this.ViewContext.Controller;
}

@using (Html.BeginRouteForm("Cortex", new { @action = "Save" }, FormMethod.Post))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.Id)

    <section class="form-horizontal">
        <h4>@(Model != null ? "Úprava úlohy" : "Vytvoření úlohy")</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        
        <div class="form-group">
            @Html.LabelFor(model => model.Active, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.Active)
                    @Html.ValidationMessageFor(model => model.Active, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        
        <div class="form-group">
            @Html.LabelFor(model => model.AppId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.AppId, new SelectList((DbSet<Application>)ViewData["ApplicationList"], "Id", "Name", Model != null ? Model.AppId : null), "-- žádná --", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.AppId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Url, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Url, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Url, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.DropDownListFor(model => model.Type, new SelectList((Dictionary<ScheduleType, string>)ViewData["ScheduleTypeNames"], "Key", "Value", Model != null ? (ScheduleType?)Model.Type : null), "-- žádná --", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
            </div>
        </div>

        <section id="ScheduleType@(ScheduleType.DAILY.ToString())Options" class="st-options hide">
            <div class="form-group">
                @Html.LabelFor(model => model.Daily_Repeat, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-2">
                    <div class="input-group">
                        @Html.EditorFor(model => model.Daily_Repeat, new { htmlAttributes = new { @class = "form-control col-md-3 col-sm-2" } })
                        <div class="input-group-addon">(dny)</div>
                    </div>
                    @Html.ValidationMessageFor(model => model.Daily_Repeat, "", new { @class = "text-danger" })
                </div>
            </div>
        </section>

        <section id="ScheduleType@(ScheduleType.WEEKLY.ToString())Options" class="st-options hide">
            <div class="form-group">
                @Html.LabelFor(model => model.Weekly_Repeat, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-2">
                    <div class="input-group">
                        @Html.EditorFor(model => model.Weekly_Repeat, new { htmlAttributes = new { @class = "form-control" } })
                        <div class="input-group-addon">týdnů vždy v:</div>
                    </div>
                    @Html.ValidationMessageFor(model => model.Weekly_Repeat, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-md-2">&nbsp;</label>
                <div class="col-md-6">
                    @foreach(KeyValuePair<Days, string> day in (Dictionary<Days, string>)ViewData["DaysNames"]) {
                        <label class="checkbox-inline">
                            <input type="checkbox" name="Weekly_Days[]" value="@day.Key" @(Model == null ? "" : ((Days)Model.Weekly_Days).HasFlag(day.Key) ? "checked" : "") />
                            @day.Value
                        </label>
                    }
                </div>
            </div>
        </section>
        
        <section id="ScheduleType@(ScheduleType.MONTHLY.ToString())Options" class="st-options hide">
            <div class="form-group">
                @Html.LabelFor(model => model.Monthly_Months, htmlAttributes: new { @class = "control-label col-md-2"})
                <div class="col-md-6">
                    @foreach(KeyValuePair<Months, string> month in (Dictionary<Months, string>)ViewData["MonthsNames"]) {
                        <label class="checkbox-inline">
                            <input type="checkbox" name="Monthly_Months[]" value="@month.Key" @(Model == null ? "" : ((Months)Model.Monthly_Months).HasFlag(month.Key) ? "checked" : "") />
                            @month.Value
                        </label>
                    }
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-md-2">
                    <input type="radio" name="Monthly_Type" id="Month_Type_Day" value="2" @(Model == null ? "" : Model.Monthly_Type == MonthlyType.DAYS ? "checked" : "") />
                    Dny
                </label>
                <div class="col-md-6">
                    @foreach(KeyValuePair<DaysInMonth, string> day in (Dictionary<DaysInMonth, string>)ViewData["DaysInMonthNames"]) {
                        <label class="checkbox-inline">
                            <input type="checkbox" name="Monthly_Days[]" value="@day.Key" @(Model == null ? "" : ((DaysInMonth)Model.Monthly_Days).HasFlag(day.Key) ? "checked" : "") />
                            @day.Value
                        </label>
                    }
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-md-2">
                    <input type="radio" name="Monthly_Type" id="Month_Type_In" value="1" @(Model == null ? "" : Model.Monthly_Type == MonthlyType.IN ? "checked" : "") />
                    V
                </label>
                <div class="col-md-6">
                    @foreach(KeyValuePair<InModifiers, string> mod in (Dictionary<InModifiers, string>)ViewData["ModifierNames"]) {
                        <label class="checkbox-inline">
                            <input type="checkbox" name="Monthly_In_Modifiers[]" value="@mod.Key" @(Model == null ? "" : ((InModifiers)Model.Monthly_In_Modifiers).HasFlag(mod.Key) ? "checked" : "") />
                            @mod.Value
                        </label>
                    }
                    <br />
                    @foreach(KeyValuePair<Days, string> day in (Dictionary<Days, string>)ViewData["DaysNames"]) {
                        <label class="checkbox-inline">
                            <input type="checkbox" name="Monthly_In_Days[]" value="@day.Key" @(Model == null ? "" : ((Days)Model.Monthly_In_Days).HasFlag(day.Key) ? "checked" : "") />
                            @day.Value
                        </label>
                    }
                </div>
            </div>
        </section>

        <section id="ScheduleType@(ScheduleType.ONIDLE.ToString())Options" class="st-options hide">
            <div class="form-group">
                @Html.LabelFor(model => model.Idle_Time, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-2">
                    <div class="input-group">
                        @Html.EditorFor(model => model.Idle_Time, new { htmlAttributes = new { @class = "form-control" } })
                        <div class="input-group-addon">min</div>
                    </div>
                    @Html.ValidationMessageFor(model => model.Idle_Time, "", new { @class = "text-danger" })
                </div>
            </div>
        </section>

        <div class="form-group" id="FormGroupDuration">
            @Html.LabelFor(model => model.Duration, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-1">
                @Html.EditorFor(model => model.Duration, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Duration, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Start_Time, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-1">
                @Html.TextBoxFor(model => model.Start_Time, new { @Value = Model != null && Model.Start_Time != null ? ((TimeSpan)Model.Start_Time).ToString(@"hh\:mm") : "", @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Start_Time, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.End_Time, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-1">
                @Html.TextBoxFor(model => model.End_Time, new { @Value = Model != null && Model.End_Time != null ? ((TimeSpan)Model.End_Time).ToString(@"hh\:mm") : "", @class = "form-control" })
                @Html.ValidationMessageFor(model => model.End_Time, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Start_Date, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-2">
                @Html.TextBoxFor(model => model.Start_Date, new { @Value = Model != null && Model.Start_Date != null ? ((DateTime)Model.Start_Date).ToString("dd.MM.yyyy") : "", @class = "form-control"})
                @Html.ValidationMessageFor(model => model.Start_Date, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.End_Date, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-2">
                @Html.TextBoxFor(model => model.End_Date, new { @Value = Model != null && Model.End_Date != null ? ((DateTime)Model.End_Date).ToString("dd.MM.yyyy") : "", @class = "form-control" })
                @Html.ValidationMessageFor(model => model.End_Date, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Repeat, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <label class="checkbox-inline">
                    <input type="checkbox" name="Repeat" value="true" id="Repeat" @(Model == null ? "" : Model.Repeat ? "checked" : "") />
                    Ano
                </label>
            </div>
        </div>

        <section class="hide" id="RepeatOptions">
            <div class="form-group">
                @Html.LabelFor(model => model.Repeat_Minute, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-2">
                    <div class="input-group">
                        @Html.EditorFor(model => model.Repeat_Minute, new { htmlAttributes = new { @class = "form-control", @min = 1, @max = 1439 } })
                        <div class="input-group-addon">minut</div>
                    </div>
                    @Html.ValidationMessageFor(model => model.Repeat_Minute, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Repeat_Duration, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-2">
                    <div class="input-group">
                        @Html.EditorFor(model => model.Repeat_Duration, new { htmlAttributes = new { @class = "form-control", @min = 1, @max = 24 } })
                        <div class="input-group-addon">hodin</div>
                    </div>
                    @Html.ValidationMessageFor(model => model.Repeat_Duration, "", new { @class = "text-danger" })
                </div>
            </div>
        </section>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </section>
    <script>
        /* <![CDATA[ */
        
        $('#Type').change(function () {
            $('.st-options, #FormGroupDuration').addClass('hide');
            $('#ScheduleType' + this.value + 'Options').removeClass('hide');
        }).change();

        $('#Repeat').change(function () {
            if (this.checked)
                $('#RepeatOptions').removeClass('hide');
            else
                $('#RepeatOptions').addClass('hide');
        }).change();

        $.datetimepicker.setLocale('cs');

        var dpConfig = {
            dayOfWeekStart: 1,
            timepicker: false,
            format: 'd.m.Y'
        };
        var tpConfig = {
            datepicker: false,
            format: 'H:i',
            step: 5
        };

        $('#Start_Date').datetimepicker(dpConfig);
        $('#End_Date').datetimepicker(dpConfig);

        $('#Start_Time').datetimepicker(tpConfig);
        $('#End_Time').datetimepicker(tpConfig);
        $('#Duration').datetimepicker(tpConfig);
        /* ]]> */
    </script>
}
