@using FSS.Omnius.FrontEnd.Utils@{T t = new T((FSS.Omnius.Modules.CORE.Locale)ViewData["locale"]);}@{ Layout = "~/Views/Shared/_OmniusUserAppLayout.cshtml"; }@{Dictionary<string, string> formState = (Dictionary<string, string>)ViewData["formState"]; }<form class="mozaicForm" method="post" enctype = "multipart/form-data"><div id="uic_breadcrumb0" name="breadcrumb0" class="uic breadcrumb-navigation breadcrumb-navigation" style="left: 40px; top: 40px; width: 598px; height: 53px; "><div class="app-icon fa @ViewData["appIcon"]"></div><div class="nav-text">@(t._(ViewData["appName"].ToString())) &gt; @(t._(ViewData["pageName"].ToString()))</div></div><div id="uic_header_label" name="header_label"  class="uic form-heading" contentTemplate="" style="left: 40px; top: 120px; width: 143px; height: 36px; ">@Html.Raw(ViewData.ContainsKey("inputData_header_label") ? "Úprava zástupce".Replace("{var1}", (ViewData["inputData_header_label"] ?? "").ToString()) : t._("Úprava zástupce") )</div><div id="uic_user_label" name="user_label"  class="uic control-label" contentTemplate="" style="left: 60px; top: 180px; width: 77px; height: 19px; ">@Html.Raw(ViewData.ContainsKey("inputData_user_label") ? "Uživatel".Replace("{var1}", (ViewData["inputData_user_label"] ?? "").ToString()) : t._("Uživatel") )</div><div id="uic_select_user_label" name="select_user_label"  class="uic control-label" contentTemplate="" style="left: 60px; top: 220px; width: 77px; height: 19px; ">@Html.Raw(ViewData.ContainsKey("inputData_select_user_label") ? "Vyber uživatele".Replace("{var1}", (ViewData["inputData_select_user_label"] ?? "").ToString()) : t._("Vyber uživatele") )</div><input id ="uic_user_textbox" name="user_textbox"  type="text" placeholder="@(t._(""))" tabindex="" value="@(formState.ContainsKey("user_textbox") ? formState["user_textbox"] : (ViewData.ContainsKey("inputData_user_textbox") ? @ViewData["inputData_user_textbox"] : ""))" class="uic input-single-line" style="left: 200px; top: 180px; width: 220px; height: 25px; "/><select id="uic_select_user_dropdown" name="select_user_dropdown" tabindex=""  class="uic dropdown-select" style="left: 200px; top: 220px; width: 220px; height: 18px; ">@{ if(ViewData["dropdownData_select_user_dropdown"] != null) { foreach(var option in (Dictionary<int, string>)ViewData["dropdownData_select_user_dropdown"]){ <option value="@(option.Key)" @((formState.ContainsKey("select_user_dropdown") && Convert.ToInt32(formState["select_user_dropdown"]) == option.Key) || (ViewData.ContainsKey("dropdownSelection_select_user_dropdown") && ViewData["dropdownSelection_select_user_dropdown"] is int && (int)ViewData["dropdownSelection_select_user_dropdown"] == option.Key) ? "selected" : "") >@(t._(option.Value))</option>}; } }</select><div id="uic_deputy_label" name="deputy_label"  class="uic control-label" contentTemplate="" style="left: 60px; top: 260px; width: 77px; height: 19px; ">@Html.Raw(ViewData.ContainsKey("inputData_deputy_label") ? "Zástupce".Replace("{var1}", (ViewData["inputData_deputy_label"] ?? "").ToString()) : t._("Zástupce") )</div><div id="uic_select_deputy_label" name="select_deputy_label"  class="uic control-label" contentTemplate="" style="left: 60px; top: 300px; width: 77px; height: 19px; ">@Html.Raw(ViewData.ContainsKey("inputData_select_deputy_label") ? "Vyber zástupce".Replace("{var1}", (ViewData["inputData_select_deputy_label"] ?? "").ToString()) : t._("Vyber zástupce") )</div><div id="uic_begin_label" name="begin_label"  class="uic control-label" contentTemplate="" style="left: 60px; top: 340px; width: 77px; height: 19px; ">@Html.Raw(ViewData.ContainsKey("inputData_begin_label") ? "Platnost od".Replace("{var1}", (ViewData["inputData_begin_label"] ?? "").ToString()) : t._("Platnost od") )</div><div id="uic_end_label" name="end_label"  class="uic control-label" contentTemplate="" style="left: 60px; top: 380px; width: 77px; height: 19px; ">@Html.Raw(ViewData.ContainsKey("inputData_end_label") ? "Control label".Replace("{var1}", (ViewData["inputData_end_label"] ?? "").ToString()) : t._("Control label") )</div><input id ="uic_deputy_textbox" name="deputy_textbox"  type="text" placeholder="@(t._(""))" tabindex="" value="@(formState.ContainsKey("deputy_textbox") ? formState["deputy_textbox"] : (ViewData.ContainsKey("inputData_deputy_textbox") ? @ViewData["inputData_deputy_textbox"] : ""))" class="uic input-single-line" style="left: 200px; top: 260px; width: 220px; height: 25px; "/><select id="uic_select_deputy_dropdown" name="select_deputy_dropdown" tabindex=""  class="uic dropdown-select" style="left: 200px; top: 300px; width: 220px; height: 18px; ">@{ if(ViewData["dropdownData_select_deputy_dropdown"] != null) { foreach(var option in (Dictionary<int, string>)ViewData["dropdownData_select_deputy_dropdown"]){ <option value="@(option.Key)" @((formState.ContainsKey("select_deputy_dropdown") && Convert.ToInt32(formState["select_deputy_dropdown"]) == option.Key) || (ViewData.ContainsKey("dropdownSelection_select_deputy_dropdown") && ViewData["dropdownSelection_select_deputy_dropdown"] is int && (int)ViewData["dropdownSelection_select_deputy_dropdown"] == option.Key) ? "selected" : "") >@(t._(option.Value))</option>}; } }</select><input id ="uic_begin_dtpicker" name="begin_dtpicker"  type="text" placeholder="@(t._(""))" tabindex="" value="@(formState.ContainsKey("begin_dtpicker") ? formState["begin_dtpicker"] : (ViewData.ContainsKey("inputData_begin_dtpicker") ? @ViewData["inputData_begin_dtpicker"] : ""))" class="uic input-single-line input-with-datepicker" style="left: 200px; top: 340px; width: 220px; height: 25px; "/><input id ="uic_end_dtpicker" name="end_dtpicker"  type="text" placeholder="@(t._(""))" tabindex="" value="@(formState.ContainsKey("end_dtpicker") ? formState["end_dtpicker"] : (ViewData.ContainsKey("inputData_end_dtpicker") ? @ViewData["inputData_end_dtpicker"] : ""))" class="uic input-single-line input-with-datepicker" style="left: 200px; top: 380px; width: 220px; height: 28px; "/><button id="uic_cancel_button" name="button" value="cancel_button"  class="uic button-simple button-large" buttonName="cancel_button" tabindex="" style="left: 280px; top: 460px; width: 195px; height: 31px;  ">@(t._("Zavřít"))</button><button id="uic_new_button" name="button" value="new_button"  class="uic button-simple button-large" buttonName="new_button" tabindex="" style="left: 520px; top: 460px; width: 195px; height: 31px;  ">@(t._("Uložit"))</button><input type="hidden" name="registry" value="@ViewData["crossBlockRegistry"]" />@Html.AntiForgeryToken()</form>