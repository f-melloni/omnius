@{ Layout = "~/Views/Shared/_OmniusUserAppLayout.cshtml"; }@{ Dictionary<string, string> formState = (Dictionary<string, string>)ViewData["formState"]; }<div class="mozaicBootstrapPage"><div class="container"><h1 class=""><span class="" id="ticketName_text">@(@"{var1}".Replace("{var1}", (ViewData.FirstOrDefault(v => v.Key.EndsWith("ticketName_text")).Value ?? "").ToString()))</span></h1><div class="panel panel-default" ><div class="panel-body"><div class="row" style="margin-bottom: 20px;"><label for="" class="col-xs-2">@(@"State:")</label><div class="col-sm-10 col-xs-12"><span class="" id="state_text">@(@"{var1}".Replace("{var1}", (ViewData.FirstOrDefault(v => v.Key.EndsWith("state_text")).Value ?? "").ToString()))</span></div></div><div class="row" style="margin-bottom: 20px;"><label for="" class="col-xs-2">@(@"Created:")</label><div class="col-xs-10 col-md-4"><input type="text" name="date_created" value="@(formState.ContainsKey("date_created") ? formState["date_created"] : (ViewData.ContainsKey("inputData_date_created") ? @ViewData["inputData_date_created"] : ""))" class="form-control" id="date_created" /></div><label for="" class="col-xs-2">@(@"Last edited:")</label><div class="col-xs-10 col-md-4"><input type="text" name="date_edited" value="@(formState.ContainsKey("date_edited") ? formState["date_edited"] : (ViewData.ContainsKey("inputData_date_edited") ? @ViewData["inputData_date_edited"] : ""))" class="form-control" id="date_edited" /></div></div><div class="row" style="margin-bottom: 20px;"><label for="" class="col-xs-2">@(@"Description:")</label><div class="col-xs-12 col-sm-10"><textarea class="form-control empty-element" name="desc_textArea" value="" style="margin: 0px; width: 982px; height: 150px; max-width: 100%; max-height: 300px;" readonly="readonly" id="desc_textArea">@(formState.ContainsKey("desc_textArea") ? formState["desc_textArea"] : ViewData["inputData_desc_textArea"])</textarea></div></div>
@if((ViewData.ContainsKey("change_employee") && (bool)ViewData["change_employee"]) == true) {
<div class="" data-varname="change_employee"><form class="form-horizontal" method="post"><div class="form-group"><label for="" class="col-sm-2">@(@"Change Employee:")</label><div class="col-xs-12 col-sm-10">
<select name="Employee_dropdown" class="form-control mbe-active" id="Employee_dropdown" value="-- Select Employee --">
    @(@"<option value="""">-- Select Employee --</option>")
    @{ if(ViewData["dropdownData_Employee_dropdown"] != null) {
            foreach(var option in ((Dictionary<int, string>)ViewData["dropdownData_Employee_dropdown"])) {
                <option value="@(option.Key)" @((formState.ContainsKey("Employee_dropdown") && Convert.ToInt32(formState["Employee_dropdown"]) == option.Key) || (ViewData.ContainsKey("dropdownSelection_Employee_dropdown") && ViewData["dropdownSelection_Employee_dropdown"] is int && (int)ViewData["dropdownSelection_Employee_dropdown"] == option.Key) ? "selected" : "")>
                    @(option.Value)
                </option>
            }
        }
    }    
</select><button type="submit" class="btn btn-default" name="button" value="Employee_button" id="Employee_button" style="margin-top: 20px;" >@(@"Change")</button></div></div>@Html.AntiForgeryToken()</form></div>
}<form class="form-horizontal" method="post"><div class="form-group"><label for="#solved_checkBox" class="col-xs-2">@(@"Solved:")</label><div class="col-xs-10"><input type="checkbox" name="solved_checkBox" value="True" class="" id="solved_checkBox" @(formState.ContainsKey("solved_checkBox") && formState["solved_checkBox"] == "on") || (ViewData.ContainsKey("checkboxData_solved_checkBox") && (ViewData["checkboxData_solved_checkBox"] as bool? == true)) ? " checked" : "") /></div></div><div class="form-group"><label for="#comment_textArea" class="col-xs-2">@(@"Comment:")</label><div class="col-xs-12 col-sm-10"><textarea class="form-control empty-element" name="comment_textArea" value="" style="margin: 0px; width: 993px; height: 154px; max-width: 100%; max-height: 300px;" id="comment_textArea" minlength="1" required="required">@(formState.ContainsKey("comment_textArea") ? formState["comment_textArea"] : ViewData["inputData_comment_textArea"])</textarea></div></div><button type="submit" class="btn btn-primary" name="button" id="send_button" value="send_button" >@(@"Send")</button>@Html.AntiForgeryToken()</form></div></div><h3 class="">@(@"Comment history")</h3><div class="panel panel-default" ><div class="panel-body"><div class="col-xs-12">
@{ if(ViewData.ContainsKey("HistoryForeach")) {
        foreach(var row in (IEnumerable<FSS.Omnius.Modules.Entitron.DBItem>)ViewData["HistoryForeach"]) {
            <div class="">
                <div class="row"><div class="col-xs-2"><div class="row"><div class="col-xs-12"><p class="text-right" style="font-weight: bold; color: #aaaaaa; margin-bottom: 0;">@(row["Date"].ToString())</p></div></div><div class="row"><div class="col-xs-12"><p class="text-right" style="font-weight: bold; font-size: 23px;">@(row["Time"].ToString())</p></div></div></div><div class="col-xs-2"><p class="text-right" style="font-weight: bold; margin-top: 10px;">@(row["Sender"].ToString())</p></div><div class="col-xs-8" style="background-color: #d5d5d5; border-radius: 12px; padding-left: 30px;"><div class="row"><div class="col-xs-12" style="padding-top: 10px"><p class="" style="font-weight: bold;">Message:Â <span class="" style="font-weight: normal;">@(row["Message"].ToString())</span></p></div></div></div></div>   
            </div>
        }
    }
}</div></div></div></div></div>