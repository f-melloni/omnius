@using FSS.Omnius.FrontEnd.Utils@{T t = new T( (FSS.Omnius.Modules.CORE.Locale)ViewData["locale"] );}@{ Layout = "~/Views/Shared/_OmniusUserAppLayout.cshtml"; }@{Dictionary<string, string> formState = (Dictionary<string, string>)ViewData["formState"]; }<form class="mozaicForm" method="post" enctype = "multipart/form-data"><div id="uic_label0" name="label0"  class="uic control-label" contentTemplate="" style="left: 60px; top: 60px; width: 75px; height: 20px; ">@Html.Raw(ViewData.ContainsKey("inputData_label0") ? "Normal".Replace("{var1}", (ViewData["inputData_label0"] ?? "").ToString()) : t._("Normal") )</div><div id="uic_label1" name="label1"  class="uic control-label" contentTemplate="" style="left: 520px; top: 60px; width: 75px; height: 20px; ">@Html.Raw(ViewData.ContainsKey("inputData_label1") ? "Read only".Replace("{var1}", (ViewData["inputData_label1"] ?? "").ToString()) : t._("Read only") )</div><input id ="uic_input-single-line2" name="input-single-line2"  type="text" placeholder="@(t._(""))" tabindex="" value="@(formState.ContainsKey("input-single-line2") ? formState["input-single-line2"] : (ViewData.ContainsKey("inputData_input-single-line2") ? @ViewData["inputData_input-single-line2"] : ""))" class="uic input-single-line" style="left: 160px; top: 60px; width: 220px; height: 25px; "/><textarea id="uic_input-multiline3" name="input-multiline3"  placeholder="@(t._(""))" tabindex="" class="uic input-multiline" style="left: 160px; top: 100px; width: 260px; height: 75px; ">@(formState.ContainsKey("input-multiline3") ? formState["input-multiline3"] : ViewData["inputData_input-multiline3"])</textarea><input id ="uic_input-single-line4" name="input-single-line4"  type="text" placeholder="@(t._(""))" tabindex="" value="@(formState.ContainsKey("input-single-line4") ? formState["input-single-line4"] : (ViewData.ContainsKey("inputData_input-single-line4") ? @ViewData["inputData_input-single-line4"] : ""))" class="uic input-single-line input-read-only" style="left: 640px; top: 60px; width: 220px; height: 25px; " readonly /><textarea id="uic_input-multiline5" name="input-multiline5"  placeholder="@(t._(""))" tabindex="" class="uic input-multiline input-read-only" style="left: 640px; top: 100px; width: 260px; height: 75px; " readonly >@(formState.ContainsKey("input-multiline5") ? formState["input-multiline5"] : ViewData["inputData_input-multiline5"])</textarea><select id="uic_dropdown-select6" name="dropdown-select6" tabindex=""  class="uic dropdown-select" style="left: 193px; top: 264.7px; width: 200px; height: 25px; "><option value="-1">@(t._("Vyberte jednu z možností"))</option>@{ if(ViewData["dropdownData_dropdown-select6"] != null) { foreach(var option in (Dictionary<int, string>)ViewData["dropdownData_dropdown-select6"]){ <option value="@(option.Key)" @((formState.ContainsKey("dropdown-select6") && Convert.ToInt32(formState["dropdown-select6"]) == option.Key) || (ViewData.ContainsKey("dropdownSelection_dropdown-select6") && ViewData["dropdownSelection_dropdown-select6"] is int && (int)ViewData["dropdownSelection_dropdown-select6"] == option.Key) ? "selected" : "") >@(t._(option.Value))</option>}; } }</select><input type="hidden" name="registry" value="@ViewData["crossBlockRegistry"]" />@Html.AntiForgeryToken()</form>
