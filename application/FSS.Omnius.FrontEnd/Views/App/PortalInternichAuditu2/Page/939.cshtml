@using FSS.Omnius.FrontEnd.Utils@{T t = new T( (string)ViewData["locale"] );}@{ Layout = "~/Views/Shared/_OmniusUserAppLayout.cshtml"; }@{Dictionary<string, string> formState = (Dictionary<string, string>)ViewData["formState"]; }<form class="mozaicForm" method="post" enctype = "multipart/form-data"><div id="uic_panel0" name="panel0"  class="uic panel-component named-panel"  style="left: 17px; top: 60px; width: 800px; height: 118px;  "><div class="named-panel-header">@(t._("Panel A"))</div><input id ="uic_input-single-line0" name="input-single-line0"  type="text" placeholder="@(t._(""))" tabindex="" value="@(formState.ContainsKey("input-single-line0") ? formState["input-single-line0"] : (ViewData.ContainsKey("inputData_input-single-line0") ? @ViewData["inputData_input-single-line0"] : ""))" class="uic input-single-line" style="left: 20px; top: 40px; width: 220px; height: 25px; "/><button id="uic_button-simple1" name="button" value="button-simple1"  class="uic button-simple button-small" buttonName="button-simple1" tabindex="" style="left: 280px; top: 40px; width: 112px; height: 21px;  ">@(t._("Small button"))</button></div><div id="uic_panel3" name="panel3"  class="uic panel-component named-panel"  style="left: 19px; top: 180px; width: 800px; height: 240px;  "><div class="named-panel-header">@(t._("Panel B"))</div><input id ="uic_input-single-line0" name="input-single-line0"  type="text" placeholder="@(t._(""))" tabindex="" value="@(formState.ContainsKey("input-single-line0") ? formState["input-single-line0"] : (ViewData.ContainsKey("inputData_input-single-line0") ? @ViewData["inputData_input-single-line0"] : ""))" class="uic input-single-line" style="left: 140px; top: 60px; width: 221px; height: 27px; "/><div id="uic_label1" name="label1"  class="uic control-label" contentTemplate="" style="left: 40px; top: 60px; width: 77px; height: 22px; ">@Html.Raw(ViewData.ContainsKey("inputData_label1") ? "Control label".Replace("{var1}", (ViewData["inputData_label1"] ?? "").ToString()) : t._("Control label") )</div><div id="uic_label2" name="label2"  class="uic control-label" contentTemplate="" style="left: 40px; top: 100px; width: 77px; height: 20px; ">@Html.Raw(ViewData.ContainsKey("inputData_label2") ? "Control label".Replace("{var1}", (ViewData["inputData_label2"] ?? "").ToString()) : t._("Control label") )</div><textarea id="uic_input-multiline3" name="input-multiline3"  placeholder="@(t._(""))" tabindex="" class="uic input-multiline" style="left: 140px; top: 100px; width: 260px; height: 75px; ">@(formState.ContainsKey("input-multiline3") ? formState["input-multiline3"] : ViewData["inputData_input-multiline3"])</textarea><button id="uic_button-simple4" name="button" value="button-simple4"  class="uic button-simple button-large" buttonName="button-simple4" tabindex="" style="left: 560px; top: 180px; width: 198px; height: 31px;  ">@(t._("Large button"))</button></div><div id="uic_breadcrump39" name="breadcrump39" class="uic breadcrumb-navigation breadcrumb-navigation" style="left: 16.0001px; top: 2.91666px; width: 800px; height: 51px; "><div class="app-icon fa @ViewData["appIcon"]"></div><div class="nav-text">@(t._(ViewData["appName"].ToString())) &gt; @(t._(ViewData["pageName"].ToString()))</div></div><input type="hidden" name="registry" value="@ViewData["crossBlockRegistry"]" />@Html.AntiForgeryToken()</form>