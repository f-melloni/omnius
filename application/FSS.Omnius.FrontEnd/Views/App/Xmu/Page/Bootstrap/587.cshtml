@{ Layout = "~/Views/Shared/_OmniusUserAppLayout.cshtml"; }@{ Dictionary<string, string> formState = (Dictionary<string, string>)ViewData["formState"]; }<div class="mozaicBootstrapPage"><div class="container mbe-active"><div class="row"><div class="col-xs-12"><div class="panel panel-default" ><div class="panel-heading"><h3 class="panel-title" role="button" data-toggle="collapse" href="#ExchangeRatesBody" aria-expanded="true">@(@"Profiles")</h3></div><div class="panel-body collapse in" aria-expanded="true"><div class="row"><div class="clearfix"><div class="col-xs-12 col-lg-8">
@{ if(ViewData.ContainsKey("tableData_Profiles_table") && ((System.Data.DataTable)(ViewData["tableData_Profiles_table"])).Rows.Count > 0) {
    <table class="table data-table no-footer dataTable" data-dtpaging="1" data-dtinfo="1" data-dtfilter="0" data-dtordering="1" data-dtcolumnfilter="1" data-dtserverside="0" id="Profiles_table" role="grid" aria-describedby="Profiles_table_info" style="">
        <thead>
            <tr>
            @foreach (System.Data.DataColumn col in ((System.Data.DataTable)(ViewData["tableData_Profiles_table"])).Columns) {
                <th>@col.Caption</th>
            }
                <th>Akce</th>
            </tr>
        </thead>
        <tfoot>
            <tr>@foreach (System.Data.DataColumn col in ((System.Data.DataTable)(ViewData["tableData_Profiles_table"])).Columns) {
                <th>@col.Caption</th>
            }
                <th>Akce</th>
            </tr>
        </tfoot>
        <tbody>
        @foreach(System.Data.DataRow row in ((System.Data.DataTable)(ViewData["tableData_Profiles_table"])).Rows) {
            <tr>@foreach (var cell in row.ItemArray) {
                <td>@cell.ToString()</td>
            }
                <td class="actionIcons"><i title="modal" class="fa fa-edit" data-action="modal" data-idparam="modelId" data-confirm=""></i></td>
            </tr>
        }
        </tbody>
    </table>
} else {
    <div class="alert alert-info empty-table-label">Tabulka neobsahuje žádná data</div>
} }
<input type="hidden" name="Profiles_table" />
</div></div></div></div></div></div></div><div class="row"><div class="col-xs-12"><div class="panel panel-default" ><div class="panel-heading" role="button" aria-expanded="true" href="#minerStatusBody" data-toggle="collapse"><h3 class="panel-title">@(@"Cash Movement")</h3></div><div class="panel-body collapse in" aria-expanded="true" style="overflow-x: auto;"><div class="row"><div class="clearfix"><div class="col-xs-12 col-md-6"><h3 class="text-center" style="margin-top: 10px;">@(@"Deposit requests")</h3>
@{ if(ViewData.ContainsKey("tableData_Deposit_request_table") && ((System.Data.DataTable)(ViewData["tableData_Deposit_request_table"])).Rows.Count > 0) {
    <table class="table data-table no-footer dataTable" data-dtpaging="0" data-dtinfo="0" data-dtfilter="1" data-dtordering="1" data-dtcolumnfilter="1" data-dtserverside="0" id="Deposit_request_table" role="grid" aria-describedby="DataTables_Table_0_info" style="">
        <thead>
            <tr>
            @foreach (System.Data.DataColumn col in ((System.Data.DataTable)(ViewData["tableData_Deposit_request_table"])).Columns) {
                <th>@col.Caption</th>
            }
                <th>Akce</th>
            </tr>
        </thead>
        <tfoot>
            <tr>@foreach (System.Data.DataColumn col in ((System.Data.DataTable)(ViewData["tableData_Deposit_request_table"])).Columns) {
                <th>@col.Caption</th>
            }
                <th>Akce</th>
            </tr>
        </tfoot>
        <tbody>
        @foreach(System.Data.DataRow row in ((System.Data.DataTable)(ViewData["tableData_Deposit_request_table"])).Rows) {
            <tr>@foreach (var cell in row.ItemArray) {
                <td>@cell.ToString()</td>
            }
                <td class="actionIcons"><i title="Allow" class="fa fa-check-circle" data-action="Allow" data-idparam="modelId" data-confirm=""></i> <i title="Stop" class="fa fa-times-circle" data-action="Stop" data-idparam="modelId" data-confirm=""></i></td>
            </tr>
        }
        </tbody>
    </table>
} else {
    <div class="alert alert-info empty-table-label">Tabulka neobsahuje žádná data</div>
} }
<input type="hidden" name="Deposit_request_table" />
</div><div class="col-xs-12 col-md-6"><h3 class="text-center" style="margin-top: 10px;">@(@"Withdrawal requests")</h3>
@{ if(ViewData.ContainsKey("tableData_Withdrawal_request_table") && ((System.Data.DataTable)(ViewData["tableData_Withdrawal_request_table"])).Rows.Count > 0) {
    <table class="table data-table no-footer dataTable" data-dtpaging="0" data-dtinfo="0" data-dtfilter="1" data-dtordering="1" data-dtcolumnfilter="1" data-dtserverside="0" id="Withdrawal_request_table" role="grid" aria-describedby="DataTables_Table_0_info" style="">
        <thead>
            <tr>
            @foreach (System.Data.DataColumn col in ((System.Data.DataTable)(ViewData["tableData_Withdrawal_request_table"])).Columns) {
                <th>@col.Caption</th>
            }
                <th>Akce</th>
            </tr>
        </thead>
        <tfoot>
            <tr>@foreach (System.Data.DataColumn col in ((System.Data.DataTable)(ViewData["tableData_Withdrawal_request_table"])).Columns) {
                <th>@col.Caption</th>
            }
                <th>Akce</th>
            </tr>
        </tfoot>
        <tbody>
        @foreach(System.Data.DataRow row in ((System.Data.DataTable)(ViewData["tableData_Withdrawal_request_table"])).Rows) {
            <tr>@foreach (var cell in row.ItemArray) {
                <td>@cell.ToString()</td>
            }
                <td class="actionIcons"><i title="Allow" class="fa fa-check-circle" data-action="Allow" data-idparam="modelId" data-confirm=""></i> <i title="Stop" class="fa fa-times-circle" data-action="Stop" data-idparam="modelId" data-confirm=""></i></td>
            </tr>
        }
        </tbody>
    </table>
} else {
    <div class="alert alert-info empty-table-label">Tabulka neobsahuje žádná data</div>
} }
<input type="hidden" name="Withdrawal_request_table" />
</div><div class="col-xs-12 col-md-12"><h3 class="text-center" style="margin-top: 10px;">@(@"Transfers")</h3><div class="graphWrapper" id="transfers_highchart" style="height: 400px;">@Html.Raw(@"<div id=""transfers_highchart_graph""></div><script>transfers_highchart_graph_chart = new Highcharts.stockChart({
  rangeSelector: {
  	selected: $.cookie('transfers_highchart_graph_chart_selectedRange') || 0
  },
  chart: {
    renderTo: 'transfers_highchart_graph',
    events: {
      redraw: function() {
        $.cookie('transfers_highchart_graph_chart_selectedRange', this.rangeSelector.selected, { expires: 365 });
      }
    }
  },
  title: {
    text: ''
  },
  credits: {
    enabled: false
  },
  xAxis: {
    type: 'datetime',
    minPadding: 0,
    maxPadding: 0,
    lineColor: '#fff',
    lineWidth: 2,
    tickLength: 0,
    labels: {
      y: 15
    }
  },
  yAxis: {
    title: {
      text: ''
    },
    labels: {
      formatter: function () {
        var isNegative = this.value < 0 ? '-' : '';
        var absValue = Math.abs(this.value);
        return isNegative + '$' + this.axis.defaultLabelFormatter.call({
          axis: this.axis,
          value: absValue
        });
      },
      x: -5
    },
    opposite: true,
    minPadding: 0,
    maxPadding: 0,
    lineColor: '#fff',
    lineWidth: 2,
    tickLength: 0,
    gridLineColor: 'rgba(255,255,255,0.5)',
    gridZIndex: 4,
    min: 0
  },
  legend: {
    enabled: false
  },
  plotOptions: {
    area: {
      marker: {
        radius: 2,
        enabled: false
      },
      fillOpacity: 0.5,
      lineWidth: 1,
      states: {
        hover: {
          lineWidth: 1
        }
      },
      threshold: null
    }
  },
  series: [{
    type: 'area',
    name: 'Expected profit',
    zIndex: 3
  },{
    type: 'area',
    name: '',
    color: '#ff0000',
    fillOpacity: 0.75,
    zIndex: 1,
    tooltip: {
      pointFormat: ''
    }
  },{
    type: 'area',
    name: 'Real profit',
    color: Highcharts.theme.colors[2],
    fillOpacity: 1,
    zIndex: 2
  }],
  tooltip: {
    valuePrefix: '$'
  },
  data: {
    csv: '{var1}',
    complete: function(options) {
      console.log(options);
    }
  }
});

            </script>".Replace("{var1}", (ViewData.FirstOrDefault(v => v.Key.EndsWith("transfers_highchart")).Value ?? "").ToString()))</div></div></div></div></div></div></div></div><div class="empty-element" id="modal_modal_profile"></div><form class="form-horizontal" method="post"><div class="modal fade modal-large" tabindex="-1" role="dialog" id="modalProfile" style="display: none;"><div class="modal-dialog" role="document"><div class="modal-content"><div class="modal-header" style="height: 35px"><button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">×</span></button><div class="empty-element" id="modal_name_profile"></div></div><div class="modal-body" style="padding: 0px"><div class="row" id="preloader_profile"><div class="col-xs-12"><div class="" style="text-align:center; "><img src="/Content/Images/Icons/modalpreloader.gif" alt="" class="" style="padding:50px 0;"></img></div></div></div><div class="empty-element" id="modal_body_profile"></div><div class="empty-element" id="modal_body_cash"></div></div></div></div></div>@Html.AntiForgeryToken()</form></div></div><script type="text/javascript" src="/Scripts/UserScripts/Application/Xmu/funkce.js"></script>