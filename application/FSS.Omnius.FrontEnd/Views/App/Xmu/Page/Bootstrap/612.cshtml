@{ Layout = "~/Views/Shared/_OmniusUserAppLayout.cshtml"; }@{ Dictionary<string, string> formState = (Dictionary<string, string>)ViewData["formState"]; }<div class="mozaicBootstrapPage"><div class="container"><header class=""><h1 class="" style="color: #000000;">@(@"New Currency")</h1></header><form class="form-horizontal" method="post"><div class="panel panel-default" ><div class="panel-heading"><h2 class="panel-title">@(@"Basics")</h2></div><div class="panel-body"><div class="form-group"><label for="minBalance_input" class="col-sm-2 col-xs-4">@(@"Currency name")</label><div class="col-sm-4 col-xs-8"><input type="text" name="currencyName_input" value="@(formState.ContainsKey("currencyName_input") ? formState["currencyName_input"] : (ViewData.ContainsKey("inputData_currencyName_input") ? @ViewData["inputData_currencyName_input"] : ""))" class="form-control" id="currencyName_input" /></div><label for="minBalance_input" class="col-sm-2 col-xs-4">@(@"Currency code")</label><div class="col-sm-4 col-xs-8"><input type="text" name="currencyCode_input" value="@(formState.ContainsKey("currencyCode_input") ? formState["currencyCode_input"] : (ViewData.ContainsKey("inputData_currencyCode_input") ? @ViewData["inputData_currencyCode_input"] : ""))" class="form-control" id="currencyCode_input" /></div></div><div class="form-group"><label for="minBalance_input" class="col-sm-2 col-xs-12">@(@"Currency image")</label><div class="col-xs-12 col-sm-10"><input type="text" name="currencyImage_input" value="@(formState.ContainsKey("currencyImage_input") ? formState["currencyImage_input"] : (ViewData.ContainsKey("inputData_currencyImage_input") ? @ViewData["inputData_currencyImage_input"] : ""))" class="form-control" id="currencyImage_input" /></div></div><div class="form-group"><label for="" class="col-sm-3 col-md-2 col-lg-3">@(@"Currency")</label><div class="pull-left col-xs-1"><span class="">@(@"crypto   ")</span><input type="radio" name="currency" value="crypto" class="" id="crypto" pull-right="pull-right" @((formState.ContainsKey("crypto") && formState["crypto"] == "crypto") || (ViewData.ContainsKey("checkboxData_crypto") && (ViewData["checkboxData_crypto"] as bool? == true)) ? " checked" : "") /></div><div class="col-xs-1"><span class="">@(@"fiat    ")</span><input type="radio" name="currency" value="fiat" class="" id="fiat" @((formState.ContainsKey("fiat") && formState["fiat"] == "fiat") || (ViewData.ContainsKey("checkboxData_fiat") && (ViewData["checkboxData_fiat"] as bool? == true)) ? " checked" : "") /></div></div></div></div><div class="panel panel-default" ><div class="panel-heading"><h2 class="panel-title">@(@"Balances")</h2></div><div class="panel-body"><div class="form-group"><label for="minBalance_input" class="col-sm-2">@(@"Minimal balance")</label><div class="col-xs-12 col-sm-10"><input type="number" name="minBalance_input" value="@(formState.ContainsKey("minBalance_input") ? formState["minBalance_input"] : (ViewData.ContainsKey("inputData_minBalance_input") ? @ViewData["inputData_minBalance_input"] : ""))" class="form-control" id="minBalance_input" /></div></div><div class="form-group"><label for="optimalBalance_input" class="col-sm-2">@(@"Optimal balance")</label><div class="col-xs-12 col-sm-10"><input type="number" name="optimalBalance_input" value="@(formState.ContainsKey("optimalBalance_input") ? formState["optimalBalance_input"] : (ViewData.ContainsKey("inputData_optimalBalance_input") ? @ViewData["inputData_optimalBalance_input"] : ""))" class="form-control" id="optimalBalance_input" /></div></div><div class="form-group"><label for="maxBalance_input" class="col-sm-2">@(@"Maximal balance")</label><div class="col-xs-12 col-sm-10"><input type="number" name="maxBalance_input" value="@(formState.ContainsKey("maxBalance_input") ? formState["maxBalance_input"] : (ViewData.ContainsKey("inputData_maxBalance_input") ? @ViewData["inputData_maxBalance_input"] : ""))" class="form-control" id="maxBalance_input" /></div></div><div class="form-group"><label for="" class="col-xs-2">@(@"Decimals")</label><div class="col-xs-12 col-sm-10 mbe-active"><input type="number" name="decimals" value="@(formState.ContainsKey("decimals") ? formState["decimals"] : (ViewData.ContainsKey("inputData_decimals") ? @ViewData["inputData_decimals"] : ""))" class="form-control" id="decimals" /></div></div></div></div><div class="panel panel-default" ><div class="panel-heading"><h2 class="panel-title">@(@"Deposit verification")</h2></div><div class="panel-body"><div class="form-group"><label for="minBalance_input" class="col-sm-2">@(@"Number of blocks")</label><div class="col-xs-12 col-sm-10"><input type="number" name="blockNumber_input" value="@(formState.ContainsKey("blockNumber_input") ? formState["blockNumber_input"] : (ViewData.ContainsKey("inputData_blockNumber_input") ? @ViewData["inputData_blockNumber_input"] : ""))" class="form-control" id="blockNumber_input" /></div></div></div></div>
<div class="row"><div class="col-xs-12"><button type="submit" class="btn btn-lg btn-primary" id="save_button" name="button" value="save_button" >@(@"Save")</button></div></div>@Html.AntiForgeryToken()</form></div></div>