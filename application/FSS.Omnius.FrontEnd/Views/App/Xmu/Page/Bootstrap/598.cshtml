@{ Layout = "~/Views/Shared/_OmniusUserAppLayout.cshtml"; }@{ Dictionary<string, string> formState = (Dictionary<string, string>)ViewData["formState"]; }<div class="mozaicBootstrapPage"><div class="" id="ProfileDiv"><div class="container"><form class="form-horizontal" method="post"><div class="panel panel-default" ><div class="panel-heading"><div class="" id="modal_name_profile"><h2 class="panel-title" style="float: left;">Settings of <span class="" id="headingUsername">@(@"{var1}".Replace("{var1}", (ViewData.FirstOrDefault(v => v.Key.EndsWith("headingUsername")).Value ?? "").ToString()))</span><span class="">@(@" (ID: ")</span><span class="" id="headingHash">@(@"{var1}".Replace("{var1}", (ViewData.FirstOrDefault(v => v.Key.EndsWith("headingHash")).Value ?? "").ToString()))</span><span class="">@(@")")</span></h2></div></div><div class="panel-body"><div class="" id="modal_body_profile"><div class="row" id="referral_id" style="padding: 15px 20px;"><div class="col-xs-12"><div class="form-group" style="margin-bottom: 10px"><label for="inputUsername" class="col-lg-3 col-sm-3 col-md-2">@(@"Name + Surname")</label><div class="col-md-4"><input name="inputName" value="@(formState.ContainsKey("inputName") ? formState["inputName"] : (ViewData.ContainsKey("inputData_inputName") ? @ViewData["inputData_inputName"] : ""))" class="form-control input-sm" id="inputName" type="text" /></div><div class="col-md-5"><input name="inputSurname" value="@(formState.ContainsKey("inputSurname") ? formState["inputSurname"] : (ViewData.ContainsKey("inputData_inputSurname") ? @ViewData["inputData_inputSurname"] : ""))" class="form-control input-sm" id="inputSurname" type="text" /></div></div><div class="form-group" style="margin-bottom: 10px"><label for="inputEmail" class="col-lg-3 col-sm-3 col-md-2">@(@"Date of Birth")</label><div class="col-sm-9"><input name="inputDate" value="@(formState.ContainsKey("inputDate") ? formState["inputDate"] : (ViewData.ContainsKey("inputData_inputDate") ? @ViewData["inputData_inputDate"] : ""))" class="form-control input-sm input-with-datepicker" id="inputDate" type="text" /></div></div><div class="form-group" style="margin-bottom: 10px"><label for="inputEmail" class="col-lg-3 col-sm-3 col-md-2">@(@"City")</label><div class="col-sm-9"><input name="inputCity" value="@(formState.ContainsKey("inputCity") ? formState["inputCity"] : (ViewData.ContainsKey("inputData_inputCity") ? @ViewData["inputData_inputCity"] : ""))" class="form-control input-sm" id="inputCity" type="text" /></div></div><div class="form-group" style="margin-bottom: 10px"><label for="inputEmail" class="col-lg-3 col-sm-3 col-md-2">@(@"Category")</label><div class="col-sm-9">
<select name="dropdownCategory" class="form-control input-sm" id="dropdownCategory">
    
    @{ if(ViewData["dropdownData_dropdownCategory"] != null) {
            foreach(var option in ((Dictionary<int, string>)ViewData["dropdownData_dropdownCategory"])) {
                <option value="@(option.Key)" @(ViewData.ContainsKey("dropdownSelection_dropdownCategory") && ViewData["dropdownSelection_dropdownCategory"].ToString() == option.Key.ToString() ? "selected" : "")>
                    @(option.Value)
                </option>
            }
        }
    }    
</select></div></div><div class="form-group" style="margin-bottom: 10px"><label for="inputEmail" class="col-lg-3 col-sm-3 col-md-2">@(@"Country")</label><div class="col-sm-9"><input name="inputCountry" value="@(formState.ContainsKey("inputCountry") ? formState["inputCountry"] : (ViewData.ContainsKey("inputData_inputCountry") ? @ViewData["inputData_inputCountry"] : ""))" class="form-control input-sm" id="inputCountry" type="text" /></div></div><div class="form-group" style="margin-bottom: 10px"><label for="inputEmail" class="col-lg-3 col-sm-3 col-md-2">@(@"Address")</label><div class="col-sm-9"><textarea class="form-control empty-element" name="inputAddress" value="" id="inputAddress" style="max-width:100%;">@(formState.ContainsKey("inputAddress") ? formState["inputAddress"] : ViewData["inputData_inputAddress"])</textarea></div></div><div class="form-group" style="margin-bottom: 10px"><label for="inputEmail" class="col-lg-3 col-sm-3 col-md-2">@(@"Email")</label><div class="col-sm-9"><input name="inputEmail" value="@(formState.ContainsKey("inputEmail") ? formState["inputEmail"] : (ViewData.ContainsKey("inputData_inputEmail") ? @ViewData["inputData_inputEmail"] : ""))" class="form-control input-sm" id="inputEmail" type="text" /></div></div><div class="form-group" style="margin-bottom: 10px"><label for="inputEmail" class="col-lg-3 col-sm-3 col-md-2">@(@"Phone Number")</label><div class="col-sm-9"><input name="inputPhone" value="@(formState.ContainsKey("inputPhone") ? formState["inputPhone"] : (ViewData.ContainsKey("inputData_inputPhone") ? @ViewData["inputData_inputPhone"] : ""))" class="form-control input-sm" id="inputPhone" type="text" /></div></div><div class="form-group" style="margin-bottom: 10px"><label for="inputOtherDetail" class="col-lg-3 col-sm-3 col-md-2">@(@"Other detail")</label><div class="col-sm-9"><textarea class="form-control empty-element" name="inputOtherDetail" value="" id="inputOtherDetail" style="max-width:100%;">@(formState.ContainsKey("inputOtherDetail") ? formState["inputOtherDetail"] : ViewData["inputData_inputOtherDetail"])</textarea></div></div><div class="form-group" style="margin-bottom: 10px"><label for="inputOtherDetail" class="col-lg-3 col-sm-3 col-md-2">@(@"Created")</label><div class="col-xs-9"><p class="" id="created">@(@"{var1}".Replace("{var1}", (ViewData.FirstOrDefault(v => v.Key.EndsWith("created")).Value ?? "").ToString()))</p></div></div><div class="form-group" style="margin-bottom: 10px"><label for="inputOtherDetail" class="col-lg-3 col-sm-3 col-md-2">@(@"Fee")</label><div class="col-xs-9"><p class="" id="fee">@(@"{var1}".Replace("{var1}", (ViewData.FirstOrDefault(v => v.Key.EndsWith("fee")).Value ?? "").ToString()))</p></div></div><div class="form-group" style="margin-bottom: 10px"><label for="inputOtherDetail" class="col-lg-3 col-sm-3 col-md-2">@(@"Fee exception")</label><div class="col-xs-9"><input name="feeException" value="" class="" id="feeException" type="checkbox" @((formState.ContainsKey("feeException") && formState["feeException"] == "on") || (ViewData.ContainsKey("checkboxData_feeException") && (ViewData["checkboxData_feeException"] as bool? == true)) ? " checked" : "") /></div></div><div class="form-group" style="margin-bottom: 10px"><label for="inputOtherDetail" class="col-lg-3 col-sm-3 col-md-2">@(@"Custom fee")</label><div class="col-sm-9"><div class="input-group"><input name="customFee" value="@(formState.ContainsKey("customFee") ? formState["customFee"] : (ViewData.ContainsKey("inputData_customFee") ? @ViewData["inputData_customFee"] : ""))" class="form-control" id="customFee" type="number" /><div class="input-group-addon"><span class="">@(@"%")</span></div></div></div></div><div class="form-group" style="margin-bottom: 10px"><label for="inputOtherDetail" class="col-lg-3 col-sm-3 col-md-2">@(@"Withdraw limit exception")</label><div class="col-xs-9"><input name="withdrawException" value="" class="" id="withdrawException" type="checkbox" @((formState.ContainsKey("withdrawException") && formState["withdrawException"] == "on") || (ViewData.ContainsKey("checkboxData_withdrawException") && (ViewData["checkboxData_withdrawException"] as bool? == true)) ? " checked" : "") /></div></div><div class="form-group" style="margin-bottom: 10px"><label for="inputOtherDetail" class="col-lg-3 col-sm-3 col-md-2">@(@"Custom withdraw limit")</label><div class="col-sm-9"><input type="number" name="customwithdrawlimit" value="@(formState.ContainsKey("customwithdrawlimit") ? formState["customwithdrawlimit"] : (ViewData.ContainsKey("inputData_customwithdrawlimit") ? @ViewData["inputData_customwithdrawlimit"] : ""))" class="form-control mbe-active" id="customwithdrawlimit" /></div></div><div class="row">
@{ if(ViewData.ContainsKey("foreachimage")) {
        foreach(var row in (IEnumerable<FSS.Omnius.Modules.Entitron.DB.DBItem>)ViewData["foreachimage"]) {
            <div class="" style="text-align: center;">
                <div class="col-xs-12 col-md-6"><span class="" id="imageUrl" style="display:none;">@(row["url"].ToString())</span><button type="button" class="btn btn-danger pull-right" name="button" id="deleteImage" value="deleteImage" data-confirm="Are you sure you want to delete this image?" ><span class="fa fa-remove"></span></button><a href="@(Convert.ToString(row["url"]))" target="_blank" class=""><img src="@(Convert.ToString(row["url"]))" alt="" class="" id="image" width="70%"></img><p class="" style="margin-top: 10px;">@(row["type"].ToString())</p><p class="">@(row["orig_name"].ToString())</p></a></div>   
            </div>
        }
    }
}</div><div class="checkbox-inline"><label for="" class="" style="padding: 20px 60px 20px 0;"><input name="frozen" value="" class="" disabled="disabled" id="frozen" type="checkbox" @((formState.ContainsKey("frozen") && formState["frozen"] == "on") || (ViewData.ContainsKey("checkboxData_frozen") && (ViewData["checkboxData_frozen"] as bool? == true)) ? " checked" : "") /> Frozen</label><label for="" class=""><input name="suspended" value="" class="" id="suspended" disabled="disabled" type="checkbox" @((formState.ContainsKey("suspended") && formState["suspended"] == "on") || (ViewData.ContainsKey("checkboxData_suspended") && (ViewData["checkboxData_suspended"] as bool? == true)) ? " checked" : "") /> Suspended</label></div><div class="form-group"><label for="" class="col-sm-3 col-md-2 col-lg-3">@(@"Referral id")</label><div class="col-sm-9"><input name="referral1-id" value="@(formState.ContainsKey("referral1-id") ? formState["referral1-id"] : (ViewData.ContainsKey("inputData_referral1-id") ? @ViewData["inputData_referral1-id"] : ""))" class="form-control" id="referral1-id" readonly="readonly" type="text" /></div></div><div class="row" style="margin-top: 20px"><div class="col-xs-12"><button type="submit" class="btn btn-primary" id="buttonUpdateUser" name="button" value="buttonUpdateUser" data-toggle="modal" data-target="#modalUpdate" >@(@"Update User")</button><button type="button" class="btn btn-warning" id="buttonFreeze" name="button" value="buttonFreeze" style="margin-left: 15px;" data-toggle="modal" data-target="#modalFreeze" >@(@"Freeze")</button><button type="button" class="btn btn-danger" id="buttonSuspend" name="button" value="buttonSuspend" style="margin-left: 15px;" data-toggle="modal" data-target="#modalSuspend" >@(@"Suspend ")</button><button type="submit" class="btn btn-primary" id="buttonUpdateCategory" name="button" value="buttonUpdateCategory" data-toggle="modal" data-target="#modalUpdate" style="margin-left: 15px;" >@(@"Update Category")</button><button type="submit" class="btn btn-primary" id="buttonUpdateFee" name="button" value="buttonUpdateFee" data-toggle="modal" data-target="#modalUpdate" style="margin-left: 15px;" >@(@"Update Fee")</button><button type="submit" class="btn btn-primary" name="button" value="WithdrawLimit" id="WithdrawLimit" style="margin-left: 15px;" >@(@"Update Withdraw limit")</button></div></div></div></div></div></div></div>@Html.AntiForgeryToken()</form><div class="" id="modal_body_cash"><div class="panel panel-default" id="panelBalance" ><div class="panel-heading"><h3 class="panel-title">@(@"Balance")</h3></div><div class="panel-body"><div class="col-xs-12"><p class="text-center lead" style="font-weight: bold;" id="total_balance">@(@"Total amount in EUR: {var1}".Replace("{var1}", (ViewData.FirstOrDefault(v => v.Key.EndsWith("total_balance")).Value ?? "").ToString()))</p></div><div class="col-xs-12"><table class="table"><thead class=""><tr class=""><th class="text-center col-xs-4">@(@"Currency")</th><th class="text-center col-xs-4">@(@"Actual")</th><th class="text-center col-xs-4">@(@"Blocked")</th></tr></thead><tbody class="">
@{ if(ViewData.ContainsKey("balance_foreach")) {
        foreach(var row in (List<object>)ViewData["balance_foreach"]) {
            <tr class="" id="balance_foreach">
                <td class="text-center col-xs-4" style="padding: 8px 0;"><span class="" id="currencyCode">@(Convert.ToString(FSS.Omnius.Modules.Tapestry.KeyValueString.ParseValue("row[currencyCode]", new Dictionary<string, object>() { { "row", row } } )))</span></td><td class="text-center col-xs-4" style="padding: 8px 0;"><span class="" id="actual">@(Convert.ToString(FSS.Omnius.Modules.Tapestry.KeyValueString.ParseValue("row[actual]", new Dictionary<string, object>() { { "row", row } } )))</span></td><td class="text-center col-xs-4" style="padding: 8px 0;"><span class="" id="blocked">@(Convert.ToString(FSS.Omnius.Modules.Tapestry.KeyValueString.ParseValue("row[blocked]", new Dictionary<string, object>() { { "row", row } } )))</span></td>   
            </tr>
        }
    }
}</tbody></table></div></div></div><div class="panel panel-default" id="panelTransactions" ><div class="panel-heading" role="button" aria-expanded="true" href="#actualYieldBody" data-toggle="collapse"><h3 class="panel-title">@(@"Overview")</h3></div><div class="panel-body collapse in" id="actualTransactions" aria-expanded="true" style="padding: 0px; overflow-x:auto;"><div class=""><ul class="nav nav-tabs"><li class="active"><a href="#tabTrades" data-toggle="tab" aria-expanded="true" class="active">@(@"Trades")</a></li><li class=""><a href="#tabWithdrawals" data-toggle="tab" aria-expanded="false" class="">@(@"Withdrawals")</a></li><li class=""><a href="#tabDeposits" data-toggle="tab" aria-expanded="false" class="">@(@"Deposits")</a></li><li class=""><a href="#tabPending" data-toggle="tab" aria-expanded="false" class="">@(@"Pending requests")</a></li><li class=""><a href="#tabTransactionErrors" data-toggle="tab" aria-expanded="false" class="">@(@"Transaction errors")</a></li><li class=""><a href="#tabWithdrawalErrors" data-toggle="tab" aria-expanded="false" class="">@(@"Withdrawal Errors")</a></li><li class=""><a href="#tab-7" data-toggle="tab" aria-expanded="false" class="">@(@"Log")</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tabTrades"><div class="col-xs-12">
@{ if(ViewData.ContainsKey("tableData_datatableTrades") && ((System.Data.DataTable)(ViewData["tableData_datatableTrades"])).Rows.Count > 0) {
    <table class="table data-table no-footer dataTable" data-dtpaging="1" data-dtinfo="1" data-dtfilter="0" data-dtordering="1" data-dtcolumnfilter="0" data-dtserverside="0" id="datatableTrades" role="grid" aria-describedby="datatableTrades_info" style="">
        <thead>
            <tr>
            @foreach (System.Data.DataColumn col in ((System.Data.DataTable)(ViewData["tableData_datatableTrades"])).Columns) {
                <th>@col.Caption</th>
            }
                
            </tr>
        </thead>
        <tfoot>
            <tr>@foreach (System.Data.DataColumn col in ((System.Data.DataTable)(ViewData["tableData_datatableTrades"])).Columns) {
                <th>@col.Caption</th>
            }
                
            </tr>
        </tfoot>
        <tbody>
        @foreach(System.Data.DataRow row in ((System.Data.DataTable)(ViewData["tableData_datatableTrades"])).Rows) {
            <tr>@foreach (var cell in row.ItemArray) {
                <td>@cell.ToString()</td>
            }
                
            </tr>
        }
        </tbody>
    </table>
} else {
    <div class="alert alert-info empty-table-label">Tabulka neobsahuje žádná data</div>
} }
<input type="hidden" name="datatableTrades" />
</div></div><div class="tab-pane" id="tabWithdrawals"><div class="col-xs-12">
@{ if(ViewData.ContainsKey("tableData_datatableWithdrawals") && ((System.Data.DataTable)(ViewData["tableData_datatableWithdrawals"])).Rows.Count > 0) {
    <table class="table data-table no-footer dataTable" data-dtpaging="0" data-dtinfo="0" data-dtfilter="0" data-dtordering="1" data-dtcolumnfilter="0" data-dtserverside="0" id="datatableWithdrawals" role="grid" aria-describedby="datatableWithdrawals_info" style="">
        <thead>
            <tr>
            @foreach (System.Data.DataColumn col in ((System.Data.DataTable)(ViewData["tableData_datatableWithdrawals"])).Columns) {
                <th>@col.Caption</th>
            }
                
            </tr>
        </thead>
        <tfoot>
            <tr>@foreach (System.Data.DataColumn col in ((System.Data.DataTable)(ViewData["tableData_datatableWithdrawals"])).Columns) {
                <th>@col.Caption</th>
            }
                
            </tr>
        </tfoot>
        <tbody>
        @foreach(System.Data.DataRow row in ((System.Data.DataTable)(ViewData["tableData_datatableWithdrawals"])).Rows) {
            <tr>@foreach (var cell in row.ItemArray) {
                <td>@cell.ToString()</td>
            }
                
            </tr>
        }
        </tbody>
    </table>
} else {
    <div class="alert alert-info empty-table-label">Tabulka neobsahuje žádná data</div>
} }
<input type="hidden" name="datatableWithdrawals" />
</div></div><div class="tab-pane" id="tabDeposits"><div class="col-xs-12">
@{ if(ViewData.ContainsKey("tableData_datatableDeposits") && ((System.Data.DataTable)(ViewData["tableData_datatableDeposits"])).Rows.Count > 0) {
    <table class="table data-table no-footer dataTable" data-dtpaging="0" data-dtinfo="0" data-dtfilter="0" data-dtordering="1" data-dtcolumnfilter="0" data-dtserverside="0" id="datatableDeposits" role="grid" aria-describedby="datatableDeposits_info" style="">
        <thead>
            <tr>
            @foreach (System.Data.DataColumn col in ((System.Data.DataTable)(ViewData["tableData_datatableDeposits"])).Columns) {
                <th>@col.Caption</th>
            }
                
            </tr>
        </thead>
        <tfoot>
            <tr>@foreach (System.Data.DataColumn col in ((System.Data.DataTable)(ViewData["tableData_datatableDeposits"])).Columns) {
                <th>@col.Caption</th>
            }
                
            </tr>
        </tfoot>
        <tbody>
        @foreach(System.Data.DataRow row in ((System.Data.DataTable)(ViewData["tableData_datatableDeposits"])).Rows) {
            <tr>@foreach (var cell in row.ItemArray) {
                <td>@cell.ToString()</td>
            }
                
            </tr>
        }
        </tbody>
    </table>
} else {
    <div class="alert alert-info empty-table-label">Tabulka neobsahuje žádná data</div>
} }
<input type="hidden" name="datatableDeposits" />
</div></div><div class="tab-pane" id="tabPending"><div class="col-xs-12">
@{ if(ViewData.ContainsKey("tableData_pendingReuquest") && ((System.Data.DataTable)(ViewData["tableData_pendingReuquest"])).Rows.Count > 0) {
    <table class="table data-table no-footer dataTable" data-dtpaging="0" data-dtinfo="1" data-dtfilter="0" data-dtordering="1" data-dtcolumnfilter="0" data-dtserverside="0" id="pendingReuquest" role="grid" aria-describedby="pendingReuquest_info" style="">
        <thead>
            <tr>
            @foreach (System.Data.DataColumn col in ((System.Data.DataTable)(ViewData["tableData_pendingReuquest"])).Columns) {
                <th>@col.Caption</th>
            }
                <th>Akce</th>
            </tr>
        </thead>
        <tfoot>
            <tr>@foreach (System.Data.DataColumn col in ((System.Data.DataTable)(ViewData["tableData_pendingReuquest"])).Columns) {
                <th>@col.Caption</th>
            }
                <th>Akce</th>
            </tr>
        </tfoot>
        <tbody>
        @foreach(System.Data.DataRow row in ((System.Data.DataTable)(ViewData["tableData_pendingReuquest"])).Rows) {
            <tr>@foreach (var cell in row.ItemArray) {
                <td>@cell.ToString()</td>
            }
                <td class="actionIcons"></td>
            </tr>
        }
        </tbody>
    </table>
} else {
    <div class="alert alert-info empty-table-label">Tabulka neobsahuje žádná data</div>
} }
<input type="hidden" name="pendingReuquest" />
</div></div><div class="tab-pane" id="tabSupport"><div class="col-xs-12">
@{ if(ViewData.ContainsKey("tableData_Support_request_table") && ((System.Data.DataTable)(ViewData["tableData_Support_request_table"])).Rows.Count > 0) {
    <table class="table data-table no-footer dataTable" data-dtpaging="0" data-dtinfo="0" data-dtfilter="0" data-dtordering="0" data-dtcolumnfilter="0" data-dtserverside="0" id="Support_request_table" role="grid" aria-describedby="datatableSupport_info" style="">
        <thead>
            <tr>
            @foreach (System.Data.DataColumn col in ((System.Data.DataTable)(ViewData["tableData_Support_request_table"])).Columns) {
                <th>@col.Caption</th>
            }
                <th>Akce</th>
            </tr>
        </thead>
        <tfoot>
            <tr>@foreach (System.Data.DataColumn col in ((System.Data.DataTable)(ViewData["tableData_Support_request_table"])).Columns) {
                <th>@col.Caption</th>
            }
                <th>Akce</th>
            </tr>
        </tfoot>
        <tbody>
        @foreach(System.Data.DataRow row in ((System.Data.DataTable)(ViewData["tableData_Support_request_table"])).Rows) {
            <tr>@foreach (var cell in row.ItemArray) {
                <td>@cell.ToString()</td>
            }
                <td class="actionIcons"><i title="modal" class="fa fa-edit" data-action="modal" data-idparam="modelId" data-confirm=""></i> <i title="delete" class="fa fa-remove" data-action="delete" data-idparam="deleteId" data-confirm=""></i></td>
            </tr>
        }
        </tbody>
    </table>
} else {
    <div class="alert alert-info empty-table-label">Tabulka neobsahuje žádná data</div>
} }
<input type="hidden" name="Support_request_table" />
</div></div><div class="tab-pane" id="tabTransactionErrors"><div class="col-xs-12">
@{ if(ViewData.ContainsKey("tableData_transactionerrors") && ((System.Data.DataTable)(ViewData["tableData_transactionerrors"])).Rows.Count > 0) {
    <table class="table data-table no-footer active dataTable" data-dtpaging="0" data-dtinfo="1" data-dtfilter="0" data-dtordering="1" data-dtcolumnfilter="0" data-dtserverside="0" id="transactionerrors" role="grid" aria-describedby="transactionerrors_info" style="">
        <thead>
            <tr>
            @foreach (System.Data.DataColumn col in ((System.Data.DataTable)(ViewData["tableData_transactionerrors"])).Columns) {
                <th>@col.Caption</th>
            }
                
            </tr>
        </thead>
        <tfoot>
            <tr>@foreach (System.Data.DataColumn col in ((System.Data.DataTable)(ViewData["tableData_transactionerrors"])).Columns) {
                <th>@col.Caption</th>
            }
                
            </tr>
        </tfoot>
        <tbody>
        @foreach(System.Data.DataRow row in ((System.Data.DataTable)(ViewData["tableData_transactionerrors"])).Rows) {
            <tr>@foreach (var cell in row.ItemArray) {
                <td>@cell.ToString()</td>
            }
                
            </tr>
        }
        </tbody>
    </table>
} else {
    <div class="alert alert-info empty-table-label">Tabulka neobsahuje žádná data</div>
} }
<input type="hidden" name="transactionerrors" />
</div></div><div class="tab-pane" id="tabWithdrawalErrors"><div class="col-xs-12">
@{ if(ViewData.ContainsKey("tableData_withdrawErrors") && ((System.Data.DataTable)(ViewData["tableData_withdrawErrors"])).Rows.Count > 0) {
    <table class="table data-table no-footer active dataTable" data-dtpaging="0" data-dtinfo="1" data-dtfilter="0" data-dtordering="1" data-dtcolumnfilter="0" data-dtserverside="0" id="withdrawErrors" role="grid" aria-describedby="withdrawErrors_info" style="">
        <thead>
            <tr>
            @foreach (System.Data.DataColumn col in ((System.Data.DataTable)(ViewData["tableData_withdrawErrors"])).Columns) {
                <th>@col.Caption</th>
            }
                
            </tr>
        </thead>
        <tfoot>
            <tr>@foreach (System.Data.DataColumn col in ((System.Data.DataTable)(ViewData["tableData_withdrawErrors"])).Columns) {
                <th>@col.Caption</th>
            }
                
            </tr>
        </tfoot>
        <tbody>
        @foreach(System.Data.DataRow row in ((System.Data.DataTable)(ViewData["tableData_withdrawErrors"])).Rows) {
            <tr>@foreach (var cell in row.ItemArray) {
                <td>@cell.ToString()</td>
            }
                
            </tr>
        }
        </tbody>
    </table>
} else {
    <div class="alert alert-info empty-table-label">Tabulka neobsahuje žádná data</div>
} }
<input type="hidden" name="withdrawErrors" />
</div></div><div class="tab-pane" id="tab-7"><div class="col-xs-12">
@{ if(ViewData.ContainsKey("tableData_LogTable") && ((System.Data.DataTable)(ViewData["tableData_LogTable"])).Rows.Count > 0) {
    <table class="table data-table no-footer active dataTable" data-dtpaging="1" data-dtinfo="1" data-dtfilter="0" data-dtordering="1" data-dtcolumnfilter="0" data-dtserverside="0" id="LogTable" role="grid" aria-describedby="LogTable_info" style="">
        <thead>
            <tr>
            @foreach (System.Data.DataColumn col in ((System.Data.DataTable)(ViewData["tableData_LogTable"])).Columns) {
                <th>@col.Caption</th>
            }
                
            </tr>
        </thead>
        <tfoot>
            <tr>@foreach (System.Data.DataColumn col in ((System.Data.DataTable)(ViewData["tableData_LogTable"])).Columns) {
                <th>@col.Caption</th>
            }
                
            </tr>
        </tfoot>
        <tbody>
        @foreach(System.Data.DataRow row in ((System.Data.DataTable)(ViewData["tableData_LogTable"])).Rows) {
            <tr>@foreach (var cell in row.ItemArray) {
                <td>@cell.ToString()</td>
            }
                
            </tr>
        }
        </tbody>
    </table>
} else {
    <div class="alert alert-info empty-table-label">Tabulka neobsahuje žádná data</div>
} }
<input type="hidden" name="LogTable" />
</div></div></div></div></div><div class="panel-footer hidden"><span class="">@(@"Panel footer")</span></div></div></div>
<div class="row" style="padding: 0px"><div class="col-xs-12"><button type="submit" class="btn btn-primary" id="buttonBack" name="button" value="buttonBack" style="margin: 30px" >@(@"Back")</button></div></div></div></div><div class="" id="modal_modal_profile"><div class="modal fade" tabindex="-1" role="dialog" style="position: absolute; z-index: 5000; display: none;" id="modalSuspend"><div class="modal-dialog" role="document"><div class="modal-content"><div class="modal-header"><button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">×</span></button><h4 class="modal-title">@(@"Are you sure?")</h4></div><div class="modal-body"><p class="">@(@"Do you really want to suspend all actives?")</p></div><div class="modal-footer"><button type="button" class="btn btn-default" data-dismiss="modal" value="buttonNo" id="buttonNo" name="button" style="display: inline-block; margin-right: 20px;" >@(@"No")</button><form class="form-horizontal" method="post" style="display: inline-block;"><button type="submit" class="btn btn-primary" name="button" value="buttonYesSuspend" id="buttonYesSuspend" >@(@"Yes")</button>@Html.AntiForgeryToken()</form></div></div></div></div><div class="modal fade" tabindex="-1" role="dialog" style="position: absolute; z-index: 5000; display: none;" id="modalFreeze"><div class="modal-dialog" role="document"><div class="modal-content"><div class="modal-header"><button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">×</span></button><h4 class="modal-title">@(@"Are you sure?")</h4></div><div class="modal-body"><p class="">@(@"Do you really want to freeze all actives?")</p></div><div class="modal-footer"><button type="button" class="btn btn-default" data-dismiss="modal" value="buttonNo" id="buttonNo" name="button" style="display: inline-block; margin-right: 20px;" >@(@"No")</button><form class="form-horizontal" method="post" style="display: inline-block;"><button type="submit" class="btn btn-primary" name="button" value="buttonYesFreeze" id="buttonYesFreeze" >@(@"Yes")</button>@Html.AntiForgeryToken()</form></div></div></div></div></div></div>