@{ Layout = "~/Views/Shared/_OmniusUserAppLayout.cshtml"; }@{ Dictionary<string, string> formState = (Dictionary<string, string>)ViewData["formState"]; }<div class="mozaicBootstrapPage"><div class="container"><div class="row mbe-active"><div class="panel panel-default" ><div class="panel-heading"><div class="" id="modal_name_profile"><h3 class="panel-title">@(@"MS error detail")</h3></div></div><div class="panel-body"><div class="" id="modal_body_profile"><form class="form-horizontal" method="post"><div class="row" id="referral_id" style="padding: 15px 20px;"><div class="col-xs-12"><div class="form-group"><label for="" class="">@(@"Message")</label><div class="col-xs-12"><input type="text" name="message" value="@(formState.ContainsKey("message") ? formState["message"] : (ViewData.ContainsKey("inputData_message") ? @ViewData["inputData_message"] : ""))" class="form-control" readonly="readonly" id="message" /></div></div></div><div class="col-xs-6"><div class="form-group"><label for="" class="">@(@"Data")</label><div class="col-xs-12"><input type="text" name="data" value="@(formState.ContainsKey("data") ? formState["data"] : (ViewData.ContainsKey("inputData_data") ? @ViewData["inputData_data"] : ""))" class="form-control" readonly="readonly" id="data" /></div></div><div class="form-group"><label for="" class="">@(@"Source")</label><div class="col-xs-12"><input type="text" name="source" value="@(formState.ContainsKey("source") ? formState["source"] : (ViewData.ContainsKey("inputData_source") ? @ViewData["inputData_source"] : ""))" class="form-control" readonly="readonly" id="source" /></div></div><div class="form-group"><label for="" class="">@(@"Time Stamp")</label><div class="col-xs-12"><input type="text" name="timeStamp" value="@(formState.ContainsKey("timeStamp") ? formState["timeStamp"] : (ViewData.ContainsKey("inputData_timeStamp") ? @ViewData["inputData_timeStamp"] : ""))" class="form-control" readonly="readonly" id="timeStamp" /></div></div><div class="form-group"><label for="" class="">@(@"Server")</label><div class="col-xs-12"><input type="text" name="server" value="@(formState.ContainsKey("server") ? formState["server"] : (ViewData.ContainsKey("inputData_server") ? @ViewData["inputData_server"] : ""))" class="form-control" readonly="readonly" id="server" /></div></div><div class="form-group"><label for="" class="">@(@"Warning Level")</label><div class="col-xs-12"><input type="text" name="warningLevel" value="@(formState.ContainsKey("warningLevel") ? formState["warningLevel"] : (ViewData.ContainsKey("inputData_warningLevel") ? @ViewData["inputData_warningLevel"] : ""))" class="form-control" readonly="readonly" id="warningLevel" /></div></div><button type="submit" class="btn btn-primary btn-lg" name="button" value="back" id="back" >@(@"Back")</button></div><div class="col-xs-6"><div class="form-group"><label for="" class="">@(@"Stack Trace")</label><div class="col-xs-12"><input type="text" name="stacktTrace" value="@(formState.ContainsKey("stacktTrace") ? formState["stacktTrace"] : (ViewData.ContainsKey("inputData_stacktTrace") ? @ViewData["inputData_stacktTrace"] : ""))" class="form-control" readonly="readonly" id="stacktTrace" /></div></div><div class="form-group"><label for="" class="">@(@"Inner Exception")</label><div class="col-xs-12"><input type="text" name="innerException" value="@(formState.ContainsKey("innerException") ? formState["innerException"] : (ViewData.ContainsKey("inputData_innerException") ? @ViewData["inputData_innerException"] : ""))" class="form-control" readonly="readonly" id="innerException" /></div></div><div class="form-group"><label for="" class="">@(@"Target Site")</label><div class="col-xs-12"><input type="text" name="targetSite" value="@(formState.ContainsKey("targetSite") ? formState["targetSite"] : (ViewData.ContainsKey("inputData_targetSite") ? @ViewData["inputData_targetSite"] : ""))" class="form-control" readonly="readonly" id="targetSite" /></div></div><div class="form-group"><label for="" class="">@(@"Date")</label><div class="col-xs-12"><input type="text" name="date" value="@(formState.ContainsKey("date") ? formState["date"] : (ViewData.ContainsKey("inputData_date") ? @ViewData["inputData_date"] : ""))" class="form-control" readonly="readonly" id="date" /></div></div><div class="form-group"><label for="" class="">@(@"Server Name")</label><div class="col-xs-12"><input type="text" name="serverName" value="@(formState.ContainsKey("serverName") ? formState["serverName"] : (ViewData.ContainsKey("inputData_serverName") ? @ViewData["inputData_serverName"] : ""))" class="form-control" readonly="readonly" id="serverName" /></div></div></div></div>@Html.AntiForgeryToken()</form></div></div></div></div></div></div>