@{ Layout = "~/Views/Shared/_OmniusUserAppLayout.cshtml"; }@{ Dictionary<string, string> formState = (Dictionary<string, string>)ViewData["formState"]; }<div class="mozaicBootstrapPage"><div class="container"><div class="row"><div class="panel panel-default" ><div class="panel-heading"><div class="" id="modal_name_profile"><h3 class="panel-title">@(@"WebDav Users")</h3></div></div><div class="panel-body" style="padding: 30px"><div class="" id="modal_body_profile"><form class="form-horizontal" method="post"><div class="row" id="referral_id" style="padding: 15px 20px;"><div class="row">
@{ if(ViewData.ContainsKey("foreachimage")) {
        foreach(var row in (IEnumerable<FSS.Omnius.Modules.Entitron.DB.DBItem>)ViewData["foreachimage"]) {
            <div class="" style="text-align: center;">
                <div class="col-xs-12 col-md-6"><span class="" id="imageUrl" style="display:none;">@(row["url"].ToString())</span><button type="button" class="btn btn-danger pull-right" name="button" id="deleteImage" value="deleteImage" data-confirm="Are you sure you want to delete this image?" ><span class="fa fa-remove"></span></button><a href="@(Convert.ToString(row["url"]))" target="_blank" class=""><img src="@(Convert.ToString(row["url"]))" alt="" class="" id="image" width="70%"></img><p class="" style="margin-top: 10px;">@(row["type"].ToString())</p><p class="">@(row["orig_name"].ToString())</p></a></div>   
            </div>
        }
    }
}</div><div class="row mbe-active" style="padding: 0 15px;"><div class="col-xs-6"><div class="form-group"><label for="" class="">@(@"Name")</label><div class="col-xs-12"><input name="name" value="@(formState.ContainsKey("name") ? formState["name"] : (ViewData.ContainsKey("inputData_name") ? @ViewData["inputData_name"] : ""))" class="form-control" readonly="readonly" id="name" type="text" /></div></div><div class="form-group"><label for="" class="">@(@"City")</label><div class="col-xs-12"><input name="city" value="@(formState.ContainsKey("city") ? formState["city"] : (ViewData.ContainsKey("inputData_city") ? @ViewData["inputData_city"] : ""))" class="form-control" readonly="readonly" id="city" type="text" /></div></div><div class="form-group"><label for="" class="">@(@"Phone number")</label><div class="col-xs-12"><input name="phone_number" value="@(formState.ContainsKey("phone_number") ? formState["phone_number"] : (ViewData.ContainsKey("inputData_phone_number") ? @ViewData["inputData_phone_number"] : ""))" class="form-control" readonly="readonly" id="phone_number" type="text" /></div></div><div class="form-group"><label for="" class="">@(@"Status")</label><div class="col-xs-12"><input name="status" value="@(formState.ContainsKey("status") ? formState["status"] : (ViewData.ContainsKey("inputData_status") ? @ViewData["inputData_status"] : ""))" class="form-control" readonly="readonly" id="status" type="text" /></div></div><div class="form-group"><label for="" class="">@(@"Category")</label><div class="col-xs-12"><input name="userLevel" value="@(formState.ContainsKey("userLevel") ? formState["userLevel"] : (ViewData.ContainsKey("inputData_userLevel") ? @ViewData["inputData_userLevel"] : ""))" class="form-control" readonly="readonly" id="userLevel" type="text" /></div></div><div class="form-group"><label for="" class="">@(@"Select user level")</label><div class="col-xs-12">
<select name="category" class="form-control" id="category">
    
    @{ if(ViewData["dropdownData_category"] != null) {
            foreach(var option in ((Dictionary<int, string>)ViewData["dropdownData_category"])) {
                <option value="@(option.Key)" @(ViewData.ContainsKey("dropdownSelection_category") && ViewData["dropdownSelection_category"].ToString() == option.Key.ToString() ? "selected" : "")>
                    @(option.Value)
                </option>
            }
        }
    }    
</select></div></div></div><div class="col-xs-6"><div class="form-group"><label for="" class="">@(@"Surname")</label><div class="col-xs-12"><input name="surname" value="@(formState.ContainsKey("surname") ? formState["surname"] : (ViewData.ContainsKey("inputData_surname") ? @ViewData["inputData_surname"] : ""))" class="form-control" readonly="readonly" id="surname" type="text" /><input name="hiddenUserId" value="@(formState.ContainsKey("hiddenUserId") ? formState["hiddenUserId"] : (ViewData.ContainsKey("inputData_hiddenUserId") ? @ViewData["inputData_hiddenUserId"] : ""))" class="" id="hiddenUserId" type="hidden" /></div></div><div class="form-group"><label for="" class="">@(@"Address")</label><div class="col-xs-12"><input name="address" value="@(formState.ContainsKey("address") ? formState["address"] : (ViewData.ContainsKey("inputData_address") ? @ViewData["inputData_address"] : ""))" class="form-control" readonly="readonly" id="address" type="text" /><input name="hiddenUserId" value="@(formState.ContainsKey("hiddenUserId") ? formState["hiddenUserId"] : (ViewData.ContainsKey("inputData_hiddenUserId") ? @ViewData["inputData_hiddenUserId"] : ""))" class="" id="hiddenUserId" type="hidden" /></div></div><div class="form-group"><label for="" class="">@(@"Country")</label><div class="col-xs-12"><input name="country" value="@(formState.ContainsKey("country") ? formState["country"] : (ViewData.ContainsKey("inputData_country") ? @ViewData["inputData_country"] : ""))" class="form-control" readonly="readonly" id="country" type="text" /><input name="hiddenUserId" value="@(formState.ContainsKey("hiddenUserId") ? formState["hiddenUserId"] : (ViewData.ContainsKey("inputData_hiddenUserId") ? @ViewData["inputData_hiddenUserId"] : ""))" class="" id="hiddenUserId" type="hidden" /></div></div><div class="form-group"><label for="" class="">@(@"User Id")</label><div class="col-xs-12"><input name="user_id" value="@(formState.ContainsKey("user_id") ? formState["user_id"] : (ViewData.ContainsKey("inputData_user_id") ? @ViewData["inputData_user_id"] : ""))" class="form-control" readonly="readonly" id="user_id" type="text" /><input name="hiddenUserId" value="@(formState.ContainsKey("hiddenUserId") ? formState["hiddenUserId"] : (ViewData.ContainsKey("inputData_hiddenUserId") ? @ViewData["inputData_hiddenUserId"] : ""))" class="" id="hiddenUserId" type="hidden" /></div></div><div class="form-group"><label for="" class="">@(@"Date of birth")</label><div class="col-xs-12"><input name="date_of_birth" value="@(formState.ContainsKey("date_of_birth") ? formState["date_of_birth"] : (ViewData.ContainsKey("inputData_date_of_birth") ? @ViewData["inputData_date_of_birth"] : ""))" class="form-control" readonly="readonly" id="date_of_birth" type="text" /><input name="hiddenUserId" value="@(formState.ContainsKey("hiddenUserId") ? formState["hiddenUserId"] : (ViewData.ContainsKey("inputData_hiddenUserId") ? @ViewData["inputData_hiddenUserId"] : ""))" class="" id="hiddenUserId" type="hidden" /></div></div></div></div><div class="row"><button type="submit" class="btn btn-primary btn-lg" name="button" value="Save" id="Save" >@(@"Update")</button><button type="submit" class="btn btn-primary btn-lg pull-right" name="button" value="Decline" id="Decline" style="background-color: #cc0000;" >@(@"Decline")</button></div></div>@Html.AntiForgeryToken()</form></div></div></div></div></div></div>